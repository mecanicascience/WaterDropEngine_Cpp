#version 450

layout (local_size_x = 256) in;


// ====== GLOBAL SCENE DATA ======
// Camera set
layout(set = 0, binding = 0) uniform SceneBuffer {
    mat4 view;
    vec4 frustum;
    vec2 zPlanes;
    int objectsCount;
} inSceneData;

// Objects set
struct ObjectData {
    mat4 model;
    vec4 collisionSphere;
};
layout(std140, set = 0, binding = 1) readonly buffer ObjectBuffer {
    ObjectData objects[];
} inObjectBuffer;
// ===============================


// ======== OBJECTS DATA =========
// Objects render batches
struct ObjectBatch {
    uint objectID;
    uint batchID;
    uint objectSceneIndex;
    uint indicesCount;
};
layout (set = 1, binding = 0) readonly buffer ObjectBatchesBuffer {
    ObjectBatch objects[];
} objectBatches;


// Render Batches
struct RenderBatch {
    uint firstIndex;
    uint indexCount;
    uint instanceCount;
};
layout(set = 1, binding = 1) buffer RenderBatchesBuffer {
    RenderBatch batches[];
} renderBatches;


// Objects ID (will match to gl_instanceID)
layout(set = 1, binding = 2) buffer ObjectsID {
    uint ids[];
} objectsIDs;


// Objects ID (will match to gl_instanceID)
struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
};
layout(set = 1, binding = 3) buffer CommandsBuffer {
    VkDrawIndexedIndirectCommand commands[];
} renderCommands;
// ===============================



// Return true if the object is visible on the screen
bool isVisible(uint objectSceneIndex) {
    // Grep object data
    vec3 center = vec3(
        inObjectBuffer.objects[objectSceneIndex].model[3][0] + inObjectBuffer.objects[objectSceneIndex].collisionSphere.x,
        inObjectBuffer.objects[objectSceneIndex].model[3][1] + inObjectBuffer.objects[objectSceneIndex].collisionSphere.y,
        inObjectBuffer.objects[objectSceneIndex].model[3][2] + inObjectBuffer.objects[objectSceneIndex].collisionSphere.z
    );
    center = (inSceneData.view * vec4(center, 1.0f)).xyz;
    float radius = inObjectBuffer.objects[objectSceneIndex].collisionSphere.w;
    if (radius <= 0.0)
        return true;

    // Frustrum culling
    bool visible = true;
    visible = visible && center.z * inSceneData.frustum.y - abs(center.x) * inSceneData.frustum.x > -radius;
    visible = visible && center.z * inSceneData.frustum.w - abs(center.y) * inSceneData.frustum.z > -radius;

    // The near/far plane culling uses camera space Z directly
    visible = visible && center.z + radius > inSceneData.zPlanes.x && center.z - radius < inSceneData.zPlanes.y;
    return visible;
}


void main() {
    uint gID = gl_GlobalInvocationID.x;
    if(gID < inSceneData.objectsCount) {
        // Get object batch index
        uint batchIndex = objectBatches.objects[gID].batchID;
        uint objectIndex = objectBatches.objects[gID].objectID;
        uint objectSceneIndex = objectBatches.objects[gID].objectSceneIndex;

        // If visible, add object to the render list
        if (isVisible(objectSceneIndex)) {
            // Add a drawing count to the gameobject batch
            uint countIndex = atomicAdd(renderBatches.batches[batchIndex].instanceCount, 1);

            // Write the object ID into the instance buffer that will map gl_instanceID
            uint instanceIndex = renderBatches.batches[batchIndex].firstIndex + countIndex;
            objectsIDs.ids[instanceIndex] = objectSceneIndex;

            // Create render command
            renderCommands.commands[instanceIndex].firstIndex = 0;
            renderCommands.commands[instanceIndex].vertexOffset = 0;
            renderCommands.commands[instanceIndex].indexCount = objectBatches.objects[gID].indicesCount;
            renderCommands.commands[instanceIndex].instanceCount = 1;
            renderCommands.commands[instanceIndex].firstInstance = objectSceneIndex;
        }
    }
}
